<!--
    //*********************************************************
    //
    // Copyright (c) Microsoft. All rights reserved.
    // THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
    // ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
    // IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
    // PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
    //
    //*********************************************************
-->

<Page
    x:Class="WinUIGallery.ControlPages.TitleBarPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:WinUIGallery"
    xmlns:data="using:WinUIGallery.Data"
    xmlns:wuxdata="using:Microsoft.UI.Xaml.Data"
    mc:Ignorable="d">

    <Page.Resources>
        <x:Double x:Key="SwatchSize">32</x:Double>
    </Page.Resources>

    <StackPanel>
        <local:ControlExample HeaderText="Default TitleBar">
            <local:ControlExample.Example>
                <StackPanel Orientation="Vertical"
                            Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
Title bar caption controls are handled by Win32 TitleBar. Hence they are not visible in the sample below.
                    </TextBlock>
                    <TitleBar x:Name="DefaultTitleBar"
                              Title="Default TitleBar"
                              Subtitle="Preview">
                        <TitleBar.IconSource>
                            <SymbolIconSource Symbol="Home" />
                        </TitleBar.IconSource>
                    </TitleBar>
                </StackPanel>
            </local:ControlExample.Example>
            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;Window x:Class="App1.MainWindow"
        xmlns:local="using:App1"
        mc:Ignorable="d"&gt;
    &lt;Grid&gt;
        &lt;Grid.RowDefinitions&gt;
            &lt;RowDefinition Height="Auto" /&gt; &lt;!-- WinUI TitleBar --&gt;
            &lt;RowDefinition Height="*" /&gt; &lt;!-- App content --&gt;
        &lt;/Grid.RowDefinitions&gt;
        &lt;TitleBar x:Name="DefaultTitleBar"
                Title="Default TitleBar"
                Subtitle="Preview"&gt;
            &lt;TitleBar.IconSource&gt;
                &lt;SymbolIconSource Symbol="Home" /&gt;
            &lt;/TitleBar.IconSource&gt;
        &lt;/TitleBar&gt;

        &lt;!-- App content --&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.CSharp>
                <x:String xml:space="preserve">
public MainWindow()
{
    this.InitializeComponent();

    // C# code to set AppTitleBar UIElement as Titlebar
    Window window = this; 
    window.ExtendsContentIntoTitleBar = true;  // Enable custom titlebar
    window.SetTitleBar(this.DefaultTitleBar);
}
                </x:String>
            </local:ControlExample.CSharp>
        </local:ControlExample>
        
        <local:ControlExample HeaderText="Default titlebar (when no user defined titlebar is set)"
                              CSharpSource="Window\TitleBar\TitleBarSample2.txt">
            <local:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                        WinUI provides a default titlebar in such cases where the user doesn't explicitly provide a uielement, for setting the titlebar. The system titlebar (Windows-provided titlebar) disappears and client area content is extended to non client area.
                        In this default case, entire non client region (titlebar region) get system titlebar behaviors like drag regions, system menu on context click etc.
                        <LineBreak></LineBreak>
                        This is the recommended way of using TitleBar apis and covers most common scenarios.
                        <LineBreak></LineBreak>
                        It can be applied by just calling ExtendsContentIntoTitleBar api. This internally calls SetTitleBar api with null argument and provides the default case.
                        <LineBreak></LineBreak>
                        Use the button below to toggle between system titlebar and default custom titlebar.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top" Spacing="20">
                        <Button x:Name="defaultTitleBar" Click="defaultTitleBar_Click"></Button>
                    </StackPanel>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
        <local:ControlExample HeaderText="User defined UIElement as custom titlebar for the window"
                              CSharpSource="Window/TitleBar/TitleBarSample1.txt">
            <local:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                        For finer controls, a user can set a top-level UIElement (defined as appTitleBar here) as titlebar for the window. The system titlebar disappears and the chosen uielement starts acting like the titlebar (gets all system titlebar behavior). <LineBreak></LineBreak>
                        The Background and Foreground Color dropdowns set the foreground and background of titlebar and caption buttons respectively.
                        <LineBreak></LineBreak>
                        Use the button below to toggle between system titlebar and custom WinUI titlebar.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top" Spacing="10">
                        <Button x:Name="customTitleBar" Click="customTitleBar_Click"></Button>
                        <TextBlock> Background Color</TextBlock>
                        <SplitButton x:Name="myBgColorButton" AutomationProperties.Name="Background color" Padding="0" MinHeight="0" MinWidth="0" VerticalAlignment="Top">
                            <Border x:Name="BackgroundColorElement" Width="{StaticResource SwatchSize}"
                                    Height="{StaticResource SwatchSize}" Background="Transparent" Margin="0" CornerRadius="4,0,0,4"/>
                            <SplitButton.Flyout>
                                <Flyout Placement="Auto">
                                    <GridView ItemClick="BgGridView_ItemClick" IsItemClickEnabled="True">
                                        <GridView.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <ItemsWrapGrid MaximumRowsOrColumns="3" Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </GridView.ItemsPanel>
                                        <GridView.Resources>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Width" Value="{StaticResource SwatchSize}"/>
                                                <Setter Property="Height" Value="{StaticResource SwatchSize}"/>
                                                <Setter Property="RadiusX" Value="4"/>
                                                <Setter Property="RadiusY" Value="4"/>
                                            </Style>
                                        </GridView.Resources>
                                        <GridView.Items>
                                            <Rectangle Fill="Transparent" AutomationProperties.Name="Transparent"/>
                                            <Rectangle Fill="Red" AutomationProperties.Name="Red"/>
                                            <Rectangle Fill="Orange" AutomationProperties.Name="Orange"/>
                                            <Rectangle Fill="Yellow" AutomationProperties.Name="Yellow"/>
                                            <Rectangle Fill="Green" AutomationProperties.Name="Green"/>
                                            <Rectangle Fill="Blue" AutomationProperties.Name="Blue"/>
                                            <Rectangle Fill="White" AutomationProperties.Name="White"/>
                                            <Rectangle Fill="Black" AutomationProperties.Name="Black"/>
                                        </GridView.Items>
                                    </GridView>

                                </Flyout>
                            </SplitButton.Flyout>
                        </SplitButton>

                        <TextBlock> Foreground Color</TextBlock>
                        <SplitButton x:Name="myFgColorButton" AutomationProperties.Name="Foreground color" Padding="0" MinHeight="0" MinWidth="0" VerticalAlignment="Top">
                            <Border x:Name="ForegroundColorElement" Width="{StaticResource SwatchSize}" Height="{StaticResource SwatchSize}" Background="Transparent" Margin="0" CornerRadius="4,0,0,4"/>
                            <SplitButton.Flyout>
                                <Flyout Placement="Auto">
                                    <GridView ItemClick="FgGridView_ItemClick" IsItemClickEnabled="True">
                                        <GridView.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <ItemsWrapGrid MaximumRowsOrColumns="3" Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </GridView.ItemsPanel>
                                        <GridView.Resources>
                                            <Style TargetType="Rectangle">
                                                <Setter Property="Width" Value="{StaticResource SwatchSize}"/>
                                                <Setter Property="Height" Value="{StaticResource SwatchSize}"/>
                                                <Setter Property="RadiusX" Value="4"/>
                                                <Setter Property="RadiusY" Value="4"/>
                                            </Style>
                                        </GridView.Resources>
                                        <GridView.Items>
                                            <Rectangle Fill="Transparent" AutomationProperties.Name="Transparent"/>
                                            <Rectangle Fill="Red" AutomationProperties.Name="Red"/>
                                            <Rectangle Fill="Orange" AutomationProperties.Name="Orange"/>
                                            <Rectangle Fill="Yellow" AutomationProperties.Name="Yellow"/>
                                            <Rectangle Fill="Green" AutomationProperties.Name="Green"/>
                                            <Rectangle Fill="Blue" AutomationProperties.Name="Blue"/>
                                            <Rectangle Fill="White" AutomationProperties.Name="White"/>
                                            <Rectangle Fill="Black" AutomationProperties.Name="Black"/>
                                        </GridView.Items>
                                    </GridView>

                                </Flyout>
                            </SplitButton.Flyout>
                        </SplitButton>

                    </StackPanel>
                </StackPanel>
            </local:ControlExample.Example>

        </local:ControlExample>
        <local:ControlExample HeaderText="Titlebar Customizations : Interactive controls in Titlebar (non client) area"
                              CSharpSource="Window\TitleBar\TitleBarSample3.txt">
            <local:ControlExample.Example>
                <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBlock TextWrapping="WrapWholeWords">
                        WinUI custom titlebar now hosting interactive clickable controls within non client region of the window, when using custom titlebar.
                        <LineBreak></LineBreak>
                        This is achieved by using lower level
                        <Hyperlink NavigateUri="https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.ui.windowing.appwindowtitlebar">
                           Microsoft.UI.AppWindowTitlebar
                        </Hyperlink>
                        and
                        <Italic>Microsoft.UI.NonClientInputPointerSource apis</Italic>
                        <LineBreak></LineBreak>
                        <LineBreak></LineBreak>
                        WinUI allows  <Bold> mix and match </Bold> of higher level WinUI custom titlebar apis with lower level AppWindow and NonClientInputPointerSource apis for most cases.
                        One exception is one should not use <Italic> Window.SetTitlebar </Italic> api along with any lower level api which also sets drag regions as it can result in unexpected behavior.
                        If needed, set <Italic> Window.SetTitlebar </Italic> to null (default case) and proceed to use lower level apis for drag functionality.
                        <LineBreak></LineBreak>
                        Use the button below to toggle between system titlebar and default custom titlebar.
                    </TextBlock>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top" Spacing="20">
                        <Button x:Name="addInteractiveElements" Click="AddInteractiveElements_Click">Add interactive control to titlebar</Button>
                    </StackPanel>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>

    </StackPanel>
</Page>
